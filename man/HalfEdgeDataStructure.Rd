% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/half_edge_data_structure.R
\name{HalfEdgeDataStructure}
\alias{HalfEdgeDataStructure}
\title{HalfEdgeDataStructure R6 Class}
\description{
HalfEdgeDataStructure R6 Class

HalfEdgeDataStructure R6 Class
}
\examples{

## ------------------------------------------------
## Method `HalfEdgeDataStructure$new`
## ------------------------------------------------

tet <- list(
  vertices = list(
    list(id = 1, point = c(1,1,1)),
    list(id = 2, point = c(1,-1,-1)),
    list(id = 3, point = c(-1,1,-1)),
    list(id = 4, point = c(-1,-1,1))
  ),
  ridges = list(
    list(id = 1, vertices = c(1,3)), list(id = 2, vertices = c(2,3)),
    list(id = 3, vertices = c(1,2)), list(id = 4, vertices = c(3,4)),
    list(id = 5, vertices = c(1,4)), list(id = 6, vertices = c(2,4))
  ),
  facets = list(
    list(id = 1, normal = c(sqrt(3)/3,sqrt(3)/3,-sqrt(3)/3), center = c(1/3,1/3,-1/3),
         orientation = -1, vertices = c(2,1,3)),
    list(id = 2, normal = c(-sqrt(3)/3,sqrt(3)/3,sqrt(3)/3), center = c(-1/3,1/3,1/3),
         orientation = 1, vertices = c(4,1,3)),
    list(id = 3, normal = c(-sqrt(3)/3,-sqrt(3)/3,-sqrt(3)/3), center = c(-1/3,-1/3,-1/3),
         orientation = -1, vertices = c(4,2,3)),
    list(id = 4, normal = c(sqrt(3)/3,-sqrt(3)/3,sqrt(3)/3), center = c(1/3,-1/3,1/3),
         orientation = 1, vertices = c(4,2,1))
  )
)
he_ds <- HalfEdgeDataStructure$new(tet)

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{BIG}}{A constant used to encode a half-edge as an integer
rotate
rotate normal vector onto axis plane

If you have a plane, you have a normal vector and an origin.
Let's call your plane's normal vector the new z axis.
You can generate the new y axis by crossing the old x axis
with the new z axis (your plane's normal).
Generate the new x axis by crossing the new z with the new y.
Make all your new axis vectors into unit vectors (length 1).
For every point you have, create a vector that goes from your new origin
to the point (vector subtraction of point - plane_origin).
Just dot with the new x and new y unit vectors and you get a pair (x,y).}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{faces}}{A list of faces of the input hull.}

\item{\code{vertices}}{A list of vertices of the input hull.}

\item{\code{half_edges}}{A list of half_edges of the input hull.}

\item{\code{he_index}}{An index of the half-edges by pairs of vertex ids (as a matrix).}

\item{\code{he_face_index}}{An index of the half-edges by pairs of face ids (as a matrix).}

\item{\code{cut}}{Requires a spanning tree of the dualhull in adjacency list form.}

\item{\code{fold}}{Requires a spanning tree of the dual of hull in adjacency list form.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-HalfEdgeDataStructure-rotate}{\code{HalfEdgeDataStructure$rotate()}}
\item \href{#method-HalfEdgeDataStructure-get_angle}{\code{HalfEdgeDataStructure$get_angle()}}
\item \href{#method-HalfEdgeDataStructure-adjmat_to_edgelist}{\code{HalfEdgeDataStructure$adjmat_to_edgelist()}}
\item \href{#method-HalfEdgeDataStructure-new}{\code{HalfEdgeDataStructure$new()}}
\item \href{#method-HalfEdgeDataStructure-clone}{\code{HalfEdgeDataStructure$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HalfEdgeDataStructure-rotate"></a>}}
\if{latex}{\out{\hypertarget{method-HalfEdgeDataStructure-rotate}{}}}
\subsection{Method \code{rotate()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HalfEdgeDataStructure$rotate(points, normal, around)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{points}}{The points to rotate}

\item{\code{normal}}{The normal to a face}

\item{\code{around}}{The center of the face}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The rotated points

get_angle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HalfEdgeDataStructure-get_angle"></a>}}
\if{latex}{\out{\hypertarget{method-HalfEdgeDataStructure-get_angle}{}}}
\subsection{Method \code{get_angle()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HalfEdgeDataStructure$get_angle(begin, finish)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{begin}}{A beginning point (x,y vector)}

\item{\code{finish}}{An ending point (x,y vector,}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
an angle in radians from the x-axis

adjmat_to_edgelist

Convert an adjacency matrix to an edgelist
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HalfEdgeDataStructure-adjmat_to_edgelist"></a>}}
\if{latex}{\out{\hypertarget{method-HalfEdgeDataStructure-adjmat_to_edgelist}{}}}
\subsection{Method \code{adjmat_to_edgelist()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HalfEdgeDataStructure$adjmat_to_edgelist(adjmat)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{adjmat}}{An adjacency matrix for a graph}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The corresponding edgelist for the same graph

initialize

Initialize a half-edge data structure using information
in a "hull" data structure.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HalfEdgeDataStructure-new"></a>}}
\if{latex}{\out{\hypertarget{method-HalfEdgeDataStructure-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HalfEdgeDataStructure$new(hull)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{hull}}{A data structure which is compatible with
the output of the cxhull::cxhull() function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An initalized half-edge data structure
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{tet <- list(
  vertices = list(
    list(id = 1, point = c(1,1,1)),
    list(id = 2, point = c(1,-1,-1)),
    list(id = 3, point = c(-1,1,-1)),
    list(id = 4, point = c(-1,-1,1))
  ),
  ridges = list(
    list(id = 1, vertices = c(1,3)), list(id = 2, vertices = c(2,3)),
    list(id = 3, vertices = c(1,2)), list(id = 4, vertices = c(3,4)),
    list(id = 5, vertices = c(1,4)), list(id = 6, vertices = c(2,4))
  ),
  facets = list(
    list(id = 1, normal = c(sqrt(3)/3,sqrt(3)/3,-sqrt(3)/3), center = c(1/3,1/3,-1/3),
         orientation = -1, vertices = c(2,1,3)),
    list(id = 2, normal = c(-sqrt(3)/3,sqrt(3)/3,sqrt(3)/3), center = c(-1/3,1/3,1/3),
         orientation = 1, vertices = c(4,1,3)),
    list(id = 3, normal = c(-sqrt(3)/3,-sqrt(3)/3,-sqrt(3)/3), center = c(-1/3,-1/3,-1/3),
         orientation = -1, vertices = c(4,2,3)),
    list(id = 4, normal = c(sqrt(3)/3,-sqrt(3)/3,sqrt(3)/3), center = c(1/3,-1/3,1/3),
         orientation = 1, vertices = c(4,2,1))
  )
)
he_ds <- HalfEdgeDataStructure$new(tet)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HalfEdgeDataStructure-clone"></a>}}
\if{latex}{\out{\hypertarget{method-HalfEdgeDataStructure-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HalfEdgeDataStructure$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
