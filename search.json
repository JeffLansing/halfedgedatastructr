[{"path":"https://jefflansing.github.io/halfedgedatastructr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 halfedgedatastructr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/articles/duality.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Duality","text":"“Duality mathematics theorem, “principle”. simple origin, powerful useful, long history going back hundreds years. … Fundamentally, duality gives two different points view looking object. many things two different points view principle dualities.” -Atiyah (2007) vignette look half-edge data structure exposes different sorts duality, via cut fold operations: duality polytope geometric dual, duality cut fold operations, duality two kinds operations polytopes.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/articles/duality.html","id":"preliminaries","dir":"Articles","previous_headings":"","what":"Preliminaries","title":"Duality","text":"carefully choose specific data work vignette. limitation won’t know results see might generalize cases, freedom since know exactly assumptions relying . example, vignette consider particular cube, dual octahedron. coordinates cube based binary representation integers 0 7, translated centered origin, ordered dual cube dual octahedron oriented way cube .1 (3d) polytopes. also use external tools calculate data used vignette. Sage GAP, accessed using Sage Cells. run code shown Sage Cell, click Evaluate button cell. First use cxhull pachage create cube dual octahedron, use inputs HalfEdgeDataStructure$new(). following figure shows two structures somewhat simplified form.2 Figure 1. cube octahedron Next like generate spanning trees two objects. use graph6 representation convenient portable format can pass Sage. somewhat bulky lists also stored data halfedgedatastr package.3 Now can use graph6 representations cube otahedron order use Sage get spanning trees (also graph6). 384 , expected Kirchhoff’s matrix-tree theorem.","code":"dim = 3 len <- 2**dim nodes <- Reduce(rbind, lapply(0:(len - 1), function(k) {   b <- str_sub(paste(rev(as.integer(intToBits(k))), collapse = \"\"), -dim)   b %>% strsplit(split = \"\") %>% unlist() %>% as.numeric() })) %>% `rownames<-`(NULL)  points <- ((nodes[c(4,8,3,7,6,2,1,5),] - colMeans(nodes)) *2) %>%    `colnames<-`(letters[24:26]) cube <- points %>% cxhull() # The copoints are the centers of the faces of the cube: copoints <- Reduce(rbind, lapply(1:6, function(k) {cube[[\"facets\"]][[k]]$center})) %>%    `rownames<-`(NULL) %>% `colnames<-`(letters[24:26]) # The octahedron is made with the copoints: oct <- copoints %>% cxhull() cu <- HalfEdgeDataStructure$new(cube) c(length(cu$vertices), length(cu$faces))  #> [1] 8 6  oc <- HalfEdgeDataStructure$new(oct) c(length(oc$vertices), length(oc$faces)) #> [1] 6 8 list(cu, oc) %>% display_hes(c(1,2), special = TRUE) cu_am <- cu %>% edgelist_from_he_ds() %>% `[`(, c(7:8)) %>%    edgelist_to_adjmat() oc_am <- oc %>% edgelist_from_he_ds() %>% `[`(, c(7:8)) %>%    edgelist_to_adjmat() cu_am %>% as_graph6() #> [1] \"GrQHGs\" oc_am %>%  as_graph6() #> [1] \"E}lw\""},{"path":"https://jefflansing.github.io/halfedgedatastructr/articles/duality.html","id":"cut-and-fold","dir":"Articles","previous_headings":"","what":"Cut and Fold","title":"Duality","text":"section want look 384 (times 2) spanning trees produced previous section. start first one. Figure 2. cut cube folded octahedron things notice figure : left black tree 8 vertices, ‘outside’, red tree 6 vertices ‘inside’. right black tree 6 vertices, ‘outside’, red tree 8 vertices ‘inside’. Abstractly (.e., ignoring types vertices) ‘outer’ tree left ‘inner’ tree right, vice versa. seems expected, interesting. Somewhat interesting following situation, look two different spanning trees. Figure 3. two cubes, one cut one folded things notice Figure 3 : object left object right , just abstractly . number 299?. explore cut/fold duality , helpful information (374×2374 \\times 2) spanning trees far. he_ds_helpers.R* file, handy tool hull_plus_g6 treats half-edge data structure arithmetic operator indices spanning trees. First apply 299. Abstractly, looks something like happens arithmetic: set numbers, get next one adding unit, get previous one subtracting unit.  let’s explore little farther. Can find something like behaves like u figure ? see 299 result applying first cycle permutation element 1. (now) unit means apply permutation . Also, see minus means invert permutation. Next look cyclec permutation detail. illustration, can show effect second cycle cube. Figure 4. twelve cubes selected 2nd cycle interesting ? least following 3 things: ignore geometry, spanning trees just subset set trees 6 vertices (5 6), trees 8 vertices (6 23). pairs trees repeat. , cubes Figure 4 can rotated reflected look like ones. things easy see tree upper right corner figure one lower left. Focus one missing edge turn tree Hamiltonian cycle: v7,v8 f1,f2 upper right, v1,v6 f4,f6 lower right. following Figure 5 summarizes things Figure 4. Figure 5. trees, permutations, rotoreflections 2nd cycle","code":"cu <- HalfEdgeDataStructure$new(cube) cu$cut <- cube_span_trees[,,1]  oc <- HalfEdgeDataStructure$new(oct) oc$fold <- cube_span_trees[,,1]  list(cu, oc) %>% display_hes(c(1,2)) cu <- HalfEdgeDataStructure$new(cube) cu$cut <- cube_span_trees[,,1]  cu2 <- HalfEdgeDataStructure$new(cube) cu2$fold <- oct_span_trees[,,299]  list(cu, cu2) %>% display_hes(c(1,2)) # Get all the spanning trees as graph6: cstg6 <- cube_span_trees %>% apply(3, as_graph6) ostg6 <- oct_span_trees %>% apply(3, as_graph6)  # Look up elements of a list of g6's in the g6-encoded spanning trees: decode <- function(g6s) {   lapply(g6s, function(g6) {     c(which(cstg6 == g6), which(ostg6 == g6))   }) %>% unlist() }  # Try out the 4 combinations of the hull_plus_g6 function, for 299 k <- 299 opk <- rbind(   hull_plus_g6(cstg6[k], cube),   hull_plus_g6(cstg6[k], oct),   hull_plus_g6(ostg6[k], cube),   hull_plus_g6(ostg6[k], oct) ) opk #>      el.amc   el.amf   coel.amc coel.amf #> [1,] \"GpOG?c\" \"GAA@GO\" \"Ek`W\"   \"EQK_\"   #> [2,] \"EQK_\"   \"Ek`W\"   \"GAA@GO\" \"GpOG?c\" #> [3,] \"G?Q@Gs\" \"Er?G\"   \"ESKw\"   \"Ei`?\"   #> [4,] \"Ei`?\"   \"ESKw\"   \"Er?G\"   \"G?Q@Gs\"  # Do the look up: opk %>% apply(1, decode) #>          [,1] [,2] [,3] [,4] #> el.amc    299  130    1  299 #> coel.amf  130  299  299    1 # get the cube and the cube spanning trees together cube_ixs <- Reduce(rbind, lapply(1:384, function(k) {   cstg6[k] %>% hull_plus_g6(cube) %>%  decode() }))   # see a short part of them cube_ixs %>% head(16) %>% t() #>          init                                                             #> el.amc      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 #> coel.amf  299 268 269 267 298 263 266 262 297 261 265 259 296 260 264 334  # regard them as a permutation of the first 384 integers pm <- cube_ixs[,2] %>% as.integer() %>% permutations::as.word() %>%    permutations::as.cycle() # what is the structure of that permutation? permutations::shape(pm) #> [1] 372  12  # separate the cycles els <- permutations::get1(pm,drop=TRUE) cyc1 <- permutations::get_cyc(pm,els[1]) %>% unlist() cyc2 <- permutations::get_cyc(pm,els[2]) %>% unlist()  # Convert the first cycle to a function: cyc1f <- permutations::get_cyc(pm,els[1]) %>% as.function()  # and apply that function to the element 1 cyc1f(1) #> [1] 299  # Invert the first cycle and convert it to a function: cyc1mf <- permutations::get_cyc(pm,els[1]) %>%    permutations::inverse() %>% as.function()  # Apply the inverse function to the element 299 cyc1mf(299) #> [1] 1 # show them cyc1 #>   [1]   1 299 130 306 127 310 187 203 143 231  38 292 134 307 216  84 343  96 #>  [19] 359  16 334  62 348  57 355  19 321 115 234  35 295 125 330 119 284 193 #>  [37] 147 226  44 247  73 373  51 369  91 335 102 242 108 283 217  87 344  61 #>  [55] 354  20 333  66 384   5 298 169 181 207 141 278 195 179 211 114 240  75 #>  [73] 372  94 336  65 353  17 322 164 157 271 220  82 345  55 368  95 361  14 #>  [91] 260  30 318 163 159 273 202 177 212  89 337  64 349  98 338  97 340  60 #> [109] 350  58 351  18 323 122 309 191 178 213  90 341  54 356  11 265  22 320 #> [127] 121 329 161 183 206 173 180 223 111 233  41 246  69 378   7 266  29 314 #> [145] 184 222  80 375  93 342 100 339  56 352  21 317 189 204 137 305 166 153 #> [163] 272 201 136 327 120 237 109 235  36 258  32 256 105 288 135 301 167 156 #> [181] 277 199 138 303 128 325 162 158 275 219 112 286 172 149 230  42 293 133 #> [199] 324 116 285 197 145 279 218  83 346  99 360  10 261  34 254  72 377   3 #> [217] 269  25 315 214  88 362  12 259  33 257  71 374  49 290 171 155 270  26 #> [235] 319 117 238  77 370  53 358   9 297 123 312 186 209 174 150 228  43 253 #> [253] 106 244  76 376  50 250 103 245 104 241 110 239  78 381   2 268  27 313 #> [271] 190 208 139 326 160 274 200 142 227  45 291 170 151 281 198 176 224  81 #> [289] 364  92 363  13 296 129 302 165 182 210 140 304 126 311 215 113 282 192 #> [307] 146 232  37 255  70 383   4 267  23 316 185 205 175 154 276 196 148 280 #> [325] 194 144 225  85 365  48 249 107 243  79 371  47 251  74 382   6 263  24 #> [343] 332  63 366  52 357  15 264  28 331 101 287 132 328 118 236  40 252  68 #> [361] 380   8 262  31 294 168 152 229  39 248  67 379 cyc2 #>  [1]  46 289 131 300 124 308 188 221  86 347  59 367 lapply(cyc2, function(k) {   cu <- HalfEdgeDataStructure$new(cube)   cu$cut <- cube_span_trees[,,k]   cu }) %>% display_hes(c(3,4), shared = TRUE)"},{"path":[]},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeff Lansing. Author, maintainer.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lansing J (2024). halfedgedatastructr: Provide half-edge data structure 3d convex polytope. R package version 0.0.0.9006, https://jefflansing.github.io/halfedgedatastructr/, https://github.com/JeffLansing/halfedgedatastructr.","code":"@Manual{,   title = {halfedgedatastructr: Provide a half-edge data structure for a 3d convex polytope},   author = {Jeff Lansing},   year = {2024},   note = {R package version 0.0.0.9006, https://jefflansing.github.io/halfedgedatastructr/},   url = {https://github.com/JeffLansing/halfedgedatastructr}, }"},{"path":"https://jefflansing.github.io/halfedgedatastructr/index.html","id":"halfedgedatastructr","dir":"","previous_headings":"","what":"Provide a half-edge data structure for a 3d convex polytope","title":"Provide a half-edge data structure for a 3d convex polytope","text":"goal halfedgedatastructr implement R material informal discussions half-edge data structure https://jerryyin.info/geometry-processing-algorithms/half-edge/ https://www.flipcode.com/archives/The_Half-Edge_Data_Structure.shtml, together additional support spanning trees.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/index.html","id":"structure","dir":"","previous_headings":"","what":"Structure","title":"Provide a half-edge data structure for a 3d convex polytope","text":"R implementation ingests information following form, subset form produced cxhull::cxhull function (https://cran.r-project.org/package=cxhull):  instance structure following tetetrahedron, using coordinates https://en.wikipedia.org/wiki/Tetrahedron#Cartesian_coordinates. converted half-edge data structure, following form: example, lists identifiers half-edges structure:","code":"tet <- list(   vertices = list(     list(id = 1, point = c(1,1,1)),     list(id = 2, point = c(1,-1,-1)),     list(id = 3, point = c(-1,1,-1)),     list(id = 4, point = c(-1,-1,1))   ),   ridges = list(     list(id = 1, vertices = c(1,3)), list(id = 2, vertices = c(2,3)),     list(id = 3, vertices = c(1,2)), list(id = 4, vertices = c(3,4)),     list(id = 5, vertices = c(1,4)), list(id = 6, vertices = c(2,4))   ),   facets = list(     list(normal = c(sqrt(3)/3,sqrt(3)/3,-sqrt(3)/3), center = c(1/3,1/3,-1/3),          orientation = -1, vertices = c(2,1,3)),     list(normal = c(-sqrt(3)/3,sqrt(3)/3,sqrt(3)/3), center = c(-1/3,1/3,1/3),          orientation = 1, vertices = c(4,1,3)),     list(normal = c(-sqrt(3)/3,-sqrt(3)/3,-sqrt(3)/3), center = c(-1/3,-1/3,-1/3),          orientation = -1, vertices = c(4,2,3)),     list(normal = c(sqrt(3)/3,-sqrt(3)/3,sqrt(3)/3), center = c(1/3,-1/3,1/3),          orientation = 1, vertices = c(4,2,1))   ) ) he_ds <- HalfEdgeDataStructure$new(tet) hes <- he_ds$half_edges unlist(lapply(1:length(hes), function(k) {   hes[[k]]$ix })) ##  [1] 103 301 203 302 102 201 304 403 104 401 204 402"},{"path":"https://jefflansing.github.io/halfedgedatastructr/index.html","id":"spanning-trees","dir":"","previous_headings":"","what":"Spanning Trees","title":"Provide a half-edge data structure for a 3d convex polytope","text":"Generating spanning trees polygons somewhat guarded art, doesn’t seem code R. Fortunately SAGE provides help . following SAGE code (easily extended polygons) generates () spanning trees tetrahedron: output code vector 16 graph6-encoded trees: can converted required adjacency matrix form, used cut fold operations: cutting tree 1 folding tree 16. duality explored one vignettes.","code":"adj_mats <- rgraph6::adjacency_from_graph6(trees) he_ds$cut <- adj_mats[[1]]  hes <- he_ds$half_edges unlist(lapply(1:length(hes), function(k) {   ifelse(hes[[k]]$cut, hes[[k]]$ix, NA) })) ##  [1]  NA  NA  NA  NA  NA  NA 304 403 104 401 204 402 he_ds2 <- HalfEdgeDataStructure$new(tet) he_ds2$fold <- adj_mats[[16]]  hes2 <- he_ds2$half_edges unlist(lapply(1:length(hes2), function(k) {   ifelse(hes2[[k]]$cut, hes2[[k]]$ix, NA) })) ##  [1]  NA  NA  NA  NA  NA  NA 304 403 104 401 204 402"},{"path":"https://jefflansing.github.io/halfedgedatastructr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Provide a half-edge data structure for a 3d convex polytope","text":"can install development version halfedgedatastructr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"JeffLansing/halfedgedatastructr\")"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Face.html","id":null,"dir":"Reference","previous_headings":"","what":"Face R6 Class — Face","title":"Face R6 Class — Face","text":"Face R6 Class Face R6 Class","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Face.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Face R6 Class — Face","text":"ix Index face. rot Rotation face: 0 = 0 = 2pi, 1 = pi/2, 2 = pi, 3 = 3pi/2. center center face: x,y,z coordinates. edge starting edge traversing perimeter face. print render identifier object","code":""},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Face.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Face R6 Class — Face","text":"Face$print() Face$clone()","code":""},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Face.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Face R6 Class — Face","text":"","code":"Face$print(...)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Face.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Face R6 Class — Face","text":"...","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Face.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Face R6 Class — Face","text":"invisible","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Face.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Face R6 Class — Face","text":"objects class cloneable method.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Face.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Face R6 Class — Face","text":"","code":"Face$clone(deep = FALSE)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Face.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Face R6 Class — Face","text":"deep Whether make deep clone.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdge.html","id":null,"dir":"Reference","previous_headings":"","what":"HalfEdge R6 Class — HalfEdge","title":"HalfEdge R6 Class — HalfEdge","text":"HalfEdge R6 Class HalfEdge R6 Class","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdge.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"HalfEdge R6 Class — HalfEdge","text":"ix Index half-edge. dir Direction half-edge points vert Vertex end half-edge pair Oppositely oriented adjacent half-edge face Face half-edge borders succ Next half-edge around face cut Whether half-edge cut print render identifier object","code":""},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdge.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"HalfEdge R6 Class — HalfEdge","text":"HalfEdge$print() HalfEdge$clone()","code":""},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdge.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HalfEdge R6 Class — HalfEdge","text":"","code":"HalfEdge$print(...)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HalfEdge R6 Class — HalfEdge","text":"...","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdge.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"HalfEdge R6 Class — HalfEdge","text":"invisible","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdge.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"HalfEdge R6 Class — HalfEdge","text":"objects class cloneable method.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdge.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"HalfEdge R6 Class — HalfEdge","text":"","code":"HalfEdge$clone(deep = FALSE)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdge.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"HalfEdge R6 Class — HalfEdge","text":"deep Whether make deep clone.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":null,"dir":"Reference","previous_headings":"","what":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"HalfEdgeDataStructure R6 Class HalfEdgeDataStructure R6 Class","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"BIG constant used encode half-edge integer rotate rotate normal vector onto axis plane plane, normal vector origin. call plane's normal vector new z axis. can generate new y axis crossing old x axis new z axis (plane's normal). Generate new x axis crossing new z new y. Make new axis vectors unit vectors (length 1). every point , create vector goes new origin point (vector subtraction point - plane_origin). Just dot new x new y unit vectors get pair (x,y).","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"faces list faces input hull. vertices list vertices input hull. half_edges list half_edges input hull. he_index index half-edges pairs vertex ids (matrix). he_face_index index half-edges pairs face ids (matrix). cut Requires spanning tree dual hull adjacency list form. fold Requires spanning tree dual hull adjacency list form.","code":""},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"HalfEdgeDataStructure$rotate() HalfEdgeDataStructure$get_angle() HalfEdgeDataStructure$adjmat_to_edgelist() HalfEdgeDataStructure$new() HalfEdgeDataStructure$clone()","code":""},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"","code":"HalfEdgeDataStructure$rotate(points, normal, around)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"points points rotate normal normal face around center face","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"rotated points get_angle","code":""},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"","code":"HalfEdgeDataStructure$get_angle(begin, finish)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"begin beginning point (x,y vector) finish ending point (x,y vector,","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"angle radians x-axis adjmat_to_edgelist Convert adjacency matrix edgelist","code":""},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"","code":"HalfEdgeDataStructure$adjmat_to_edgelist(adjmat)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"adjmat adjacency matrix graph","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"corresponding edgelist graph initialize Initialize half-edge data structure using information \"hull\" data structure.","code":""},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"","code":"HalfEdgeDataStructure$new(hull)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"hull data structure compatible output cxhull::cxhull() function.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"initalized half-edge data structure","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"","code":"tet <- list(   vertices = list(     list(id = 1, point = c(1,1,1)),     list(id = 2, point = c(1,-1,-1)),     list(id = 3, point = c(-1,1,-1)),     list(id = 4, point = c(-1,-1,1))   ),   ridges = list(     list(id = 1, vertices = c(1,3)), list(id = 2, vertices = c(2,3)),     list(id = 3, vertices = c(1,2)), list(id = 4, vertices = c(3,4)),     list(id = 5, vertices = c(1,4)), list(id = 6, vertices = c(2,4))   ),   facets = list(     list(id = 1, normal = c(sqrt(3)/3,sqrt(3)/3,-sqrt(3)/3), center = c(1/3,1/3,-1/3),          orientation = -1, vertices = c(2,1,3)),     list(id = 2, normal = c(-sqrt(3)/3,sqrt(3)/3,sqrt(3)/3), center = c(-1/3,1/3,1/3),          orientation = 1, vertices = c(4,1,3)),     list(id = 3, normal = c(-sqrt(3)/3,-sqrt(3)/3,-sqrt(3)/3), center = c(-1/3,-1/3,-1/3),          orientation = -1, vertices = c(4,2,3)),     list(id = 4, normal = c(sqrt(3)/3,-sqrt(3)/3,sqrt(3)/3), center = c(1/3,-1/3,1/3),          orientation = 1, vertices = c(4,2,1))   ) ) he_ds <- HalfEdgeDataStructure$new(tet)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"objects class cloneable method.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"","code":"HalfEdgeDataStructure$clone(deep = FALSE)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"deep Whether make deep clone.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/HalfEdgeDataStructure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HalfEdgeDataStructure R6 Class — HalfEdgeDataStructure","text":"","code":"## ------------------------------------------------ ## Method `HalfEdgeDataStructure$new` ## ------------------------------------------------  tet <- list(   vertices = list(     list(id = 1, point = c(1,1,1)),     list(id = 2, point = c(1,-1,-1)),     list(id = 3, point = c(-1,1,-1)),     list(id = 4, point = c(-1,-1,1))   ),   ridges = list(     list(id = 1, vertices = c(1,3)), list(id = 2, vertices = c(2,3)),     list(id = 3, vertices = c(1,2)), list(id = 4, vertices = c(3,4)),     list(id = 5, vertices = c(1,4)), list(id = 6, vertices = c(2,4))   ),   facets = list(     list(id = 1, normal = c(sqrt(3)/3,sqrt(3)/3,-sqrt(3)/3), center = c(1/3,1/3,-1/3),          orientation = -1, vertices = c(2,1,3)),     list(id = 2, normal = c(-sqrt(3)/3,sqrt(3)/3,sqrt(3)/3), center = c(-1/3,1/3,1/3),          orientation = 1, vertices = c(4,1,3)),     list(id = 3, normal = c(-sqrt(3)/3,-sqrt(3)/3,-sqrt(3)/3), center = c(-1/3,-1/3,-1/3),          orientation = -1, vertices = c(4,2,3)),     list(id = 4, normal = c(sqrt(3)/3,-sqrt(3)/3,sqrt(3)/3), center = c(1/3,-1/3,1/3),          orientation = 1, vertices = c(4,2,1))   ) ) he_ds <- HalfEdgeDataStructure$new(tet)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Vertex.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertex R6 Class — Vertex","title":"Vertex R6 Class — Vertex","text":"Vertex R6 Class Vertex R6 Class","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Vertex.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Vertex R6 Class — Vertex","text":"ix Index vertex. point spatial location vertex: x,y,z coordinates. edge half-edge starts vertex. print render identifier object","code":""},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Vertex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Vertex R6 Class — Vertex","text":"Vertex$print() Vertex$clone()","code":""},{"path":[]},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Vertex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertex R6 Class — Vertex","text":"","code":"Vertex$print(...)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Vertex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertex R6 Class — Vertex","text":"...","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Vertex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Vertex R6 Class — Vertex","text":"invisible","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Vertex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Vertex R6 Class — Vertex","text":"objects class cloneable method.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Vertex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertex R6 Class — Vertex","text":"","code":"Vertex$clone(deep = FALSE)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/Vertex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertex R6 Class — Vertex","text":"deep Whether make deep clone.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/adjmats_from_info.html","id":null,"dir":"Reference","previous_headings":"","what":"adjmats_from_info — adjmats_from_info","title":"adjmats_from_info — adjmats_from_info","text":"adjmats_from_info","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/adjmats_from_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adjmats_from_info — adjmats_from_info","text":"","code":"adjmats_from_info(info)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/adjmats_from_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adjmats_from_info — adjmats_from_info","text":"info Either edgeinfo coedgeinfo data structure","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/adjmats_from_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adjmats_from_info — adjmats_from_info","text":"Two adjacency matrices extracted info structure, one cut edges one fold edges.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/adjmats_from_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"adjmats_from_info — adjmats_from_info","text":"","code":"info <- rbind(c(0,0,0,1,1,1,1,2,1),c(1,1,1,0,0,0,2,1,0)) adjmats_from_info(info) #> $amc #>      [,1] [,2] #> [1,]    1    1 #> [2,]    1    0 #>  #> $amf #>      [,1] [,2] #> [1,]    1    0 #> [2,]    1    0 #>"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/coedgelist_from_he_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"coedgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure, but using the 'virtual' edges between faces instead of the actual edges between vertices. — coedgelist_from_he_ds","title":"coedgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure, but using the 'virtual' edges between faces instead of the actual edges between vertices. — coedgelist_from_he_ds","text":"coedgelist_from_he_ds Produce extended edgelist information half-edge data structure, using 'virtual' edges faces instead actual edges vertices.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/coedgelist_from_he_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"coedgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure, but using the 'virtual' edges between faces instead of the actual edges between vertices. — coedgelist_from_he_ds","text":"","code":"coedgelist_from_he_ds(he_ds)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/coedgelist_from_he_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"coedgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure, but using the 'virtual' edges between faces instead of the actual edges between vertices. — coedgelist_from_he_ds","text":"he_ds half-edge data structure","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/coedgelist_from_he_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"coedgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure, but using the 'virtual' edges between faces instead of the actual edges between vertices. — coedgelist_from_he_ds","text":"9 column matrix information two endpoints edge, labels endpoints, indication whether edge 'cut' .","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/coedgelist_from_he_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"coedgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure, but using the 'virtual' edges between faces instead of the actual edges between vertices. — coedgelist_from_he_ds","text":"","code":"coedgelist_from_he_ds(list(half_edges = c())) #> NULL"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_abstract_trees.html","id":null,"dir":"Reference","previous_headings":"","what":"cube_abstract_trees — cube_abstract_trees","title":"cube_abstract_trees — cube_abstract_trees","text":"23 trees 8 vertices array adjacency matrices","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_abstract_trees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cube_abstract_trees — cube_abstract_trees","text":"","code":"cube_abstract_trees"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_abstract_trees.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"cube_abstract_trees — cube_abstract_trees","text":"object class \\codearray dimension 8 x 8 x 23.`","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_abstract_trees.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"cube_abstract_trees — cube_abstract_trees","text":"Generated Sage: graphs.trees(8)","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_automorphism_group.html","id":null,"dir":"Reference","previous_headings":"","what":"cube_automorphism_group — cube_automorphism_group","title":"cube_automorphism_group — cube_automorphism_group","text":"48 element automorphism group cube, accompanying information. elements ordered conjugacy classes. names derived conjugacy class names produced GAP.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_automorphism_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cube_automorphism_group — cube_automorphism_group","text":"","code":"cube_automorphism_group"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_automorphism_group.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"cube_automorphism_group — cube_automorphism_group","text":"object class \\codelist length 4: elements object class \\codematrix (inherits \\codearray) 48 rows 8 columns names object class \\codecharacter length 48 perms object class \\codecharacter length 48 matrices object class \\codearray dimension 6 x 6 x 48","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_automorphism_group.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"cube_automorphism_group — cube_automorphism_group","text":"Generated GAP","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_span_trees.html","id":null,"dir":"Reference","previous_headings":"","what":"cube_span_trees — cube_span_trees","title":"cube_span_trees — cube_span_trees","text":"384 spanning trees ot cube array adjacency matrices","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_span_trees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cube_span_trees — cube_span_trees","text":"","code":"cube_span_trees"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_span_trees.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"cube_span_trees — cube_span_trees","text":"object class \\codearray dimension 8 x 8 x 384.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/cube_span_trees.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"cube_span_trees — cube_span_trees","text":"Generated Sage: \\codeoct = Graph(\"GrQHGs\") \t\t\t      oct.spanning_trees()","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/edgelist_from_he_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"edgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure — edgelist_from_he_ds","title":"edgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure — edgelist_from_he_ds","text":"edgelist_from_he_ds Produce extended edgelist information half-edge data structure","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/edgelist_from_he_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"edgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure — edgelist_from_he_ds","text":"","code":"edgelist_from_he_ds(he_ds)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/edgelist_from_he_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"edgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure — edgelist_from_he_ds","text":"he_ds half-edge data structure","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/edgelist_from_he_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"edgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure — edgelist_from_he_ds","text":"9 column matrix information two endpoints edge, labels endpoints, indication whether edge 'cut' .","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/edgelist_from_he_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"edgelist_from_he_ds Produce an extended edgelist from the information in a half-edge data structure — edgelist_from_he_ds","text":"","code":"edgelist_from_he_ds(list(half_edges = c())) #> NULL"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/edgelist_to_adjmat.html","id":null,"dir":"Reference","previous_headings":"","what":"edgelist_to_adjmat Convert an edgelist to an adjacency matrix. The edgelist is treated as an index array for the desired matrix. — edgelist_to_adjmat","title":"edgelist_to_adjmat Convert an edgelist to an adjacency matrix. The edgelist is treated as an index array for the desired matrix. — edgelist_to_adjmat","text":"edgelist_to_adjmat Convert edgelist adjacency matrix. edgelist treated index array desired matrix.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/edgelist_to_adjmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"edgelist_to_adjmat Convert an edgelist to an adjacency matrix. The edgelist is treated as an index array for the desired matrix. — edgelist_to_adjmat","text":"","code":"edgelist_to_adjmat(edgelist, dim = NULL)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/edgelist_to_adjmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"edgelist_to_adjmat Convert an edgelist to an adjacency matrix. The edgelist is treated as an index array for the desired matrix. — edgelist_to_adjmat","text":"edgelist n X 2 matrix edges graph dim Optional help deciding dimension result; defaults largest value edgelist","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/edgelist_to_adjmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"edgelist_to_adjmat Convert an edgelist to an adjacency matrix. The edgelist is treated as an index array for the desired matrix. — edgelist_to_adjmat","text":"adjacency matrix graph","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/edgelist_to_adjmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"edgelist_to_adjmat Convert an edgelist to an adjacency matrix. The edgelist is treated as an index array for the desired matrix. — edgelist_to_adjmat","text":"","code":"elist <- rbind(c(1,4), c(2,4), c(3,4)) edgelist_to_adjmat(elist) #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    1 #> [2,]    0    0    0    1 #> [3,]    0    0    0    1 #> [4,]    1    1    1    0"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/hull_plus_g6.html","id":null,"dir":"Reference","previous_headings":"","what":"hull_plus_g6 Treat the half-edge data structure as an arithmetic operator on the indices of the spanning trees — hull_plus_g6","title":"hull_plus_g6 Treat the half-edge data structure as an arithmetic operator on the indices of the spanning trees — hull_plus_g6","text":"hull_plus_g6 Treat half-edge data structure arithmetic operator indices spanning trees","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/hull_plus_g6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hull_plus_g6 Treat the half-edge data structure as an arithmetic operator on the indices of the spanning trees — hull_plus_g6","text":"","code":"hull_plus_g6(g6, hull)"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/hull_plus_g6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hull_plus_g6 Treat the half-edge data structure as an arithmetic operator on the indices of the spanning trees — hull_plus_g6","text":"g6 spanning tree g6 encoding hull hull structure polyhedron","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/hull_plus_g6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hull_plus_g6 Treat the half-edge data structure as an arithmetic operator on the indices of the spanning trees — hull_plus_g6","text":"Vector 4 adjacency matrices g6 encoding. 2 trees, one trees identical input tree.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/map12.html","id":null,"dir":"Reference","previous_headings":"","what":"map12 — map12","title":"map12 — map12","text":"convenience mapping abstract trees spanning trees","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/map12.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"map12 — map12","text":"","code":"map12"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/map12.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"map12 — map12","text":"object class tbl_df (inherits tbl, data.frame) 12 rows 7 columns.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/map372.html","id":null,"dir":"Reference","previous_headings":"","what":"map372 — map372","title":"map372 — map372","text":"convenience mapping abstract trees spanning trees","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/map372.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"map372 — map372","text":"","code":"map372"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/map372.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"map372 — map372","text":"object class tbl_df (inherits tbl, data.frame) 372 rows 7 columns.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/oct_abstract_trees.html","id":null,"dir":"Reference","previous_headings":"","what":"oct_abstract_trees — oct_abstract_trees","title":"oct_abstract_trees — oct_abstract_trees","text":"6 trees 6 vertices array adjacency matrices","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/oct_abstract_trees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"oct_abstract_trees — oct_abstract_trees","text":"","code":"oct_abstract_trees"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/oct_abstract_trees.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"oct_abstract_trees — oct_abstract_trees","text":"object class \\codearray dimension 6 x 6 x 6.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/oct_abstract_trees.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"oct_abstract_trees — oct_abstract_trees","text":"Generated Sage: graphs.trees(6)","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/oct_span_trees.html","id":null,"dir":"Reference","previous_headings":"","what":"oct_span_trees — oct_span_trees","title":"oct_span_trees — oct_span_trees","text":"384 spanning trees ot octahedron array adjacency matrices","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/oct_span_trees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"oct_span_trees — oct_span_trees","text":"","code":"oct_span_trees"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/oct_span_trees.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"oct_span_trees — oct_span_trees","text":"object class \\codearray dimension 6 x 6 x 384.","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/oct_span_trees.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"oct_span_trees — oct_span_trees","text":"Generated Sage: oct = Graph(\"E}lw\") oct.spanning_trees()","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/octahedron_automorphism_group.html","id":null,"dir":"Reference","previous_headings":"","what":"octahedron_automorphism_group — octahedron_automorphism_group","title":"octahedron_automorphism_group — octahedron_automorphism_group","text":"48 element automorphism group octahedron, accompanying information","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/octahedron_automorphism_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"octahedron_automorphism_group — octahedron_automorphism_group","text":"","code":"octahedron_automorphism_group"},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/octahedron_automorphism_group.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"octahedron_automorphism_group — octahedron_automorphism_group","text":"object class \\codelist length 4: elements object class \\codematrix (inherits \\codearray) 48 rows 8 columns names object class \\codecharacter length 48 perms object class \\codecharacter length 48 matrices object class \\codearray dimension 6 x 6 x 48","code":""},{"path":"https://jefflansing.github.io/halfedgedatastructr/reference/octahedron_automorphism_group.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"octahedron_automorphism_group — octahedron_automorphism_group","text":"Generated GAP","code":""}]
